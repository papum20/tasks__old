//MENO VECCHIO
















#include <iostream>
#include <unordered_map>
#include <vector>
#include <limits>
#include <set>
using namespace std;








int N, M;
struct road{
	int t, l;	//to, length
};
unordered_map <int, vector<road> > roads;








int mn = numeric_limits<int>::max();
set <int> used;
unordered_map <int, int> mnL;

void ricorsiva(int start, int pos, int len)
{
	if(len > mn) return;

	mnL[pos] = len;

	for(auto i:roads[pos])
	{
		if(i.t == start && used.size() > start+1){
			mn = min(mn, len+i.l);
		}
		else if(used.find(i.t) == used.end()){
			if(mnL[i.t] != 0 && mnL[i.t] < len+i.l) continue;
			used.insert(i.t);
			ricorsiva(start, i.t, len+i.l);
			used.erase(i.t);
		}

	}

}











int main()
{
//    freopen("input.txt","r",stdin);
//    freopen("output.txt","w",stdout);


	cin >> N >> M;

	for(int i = 0; i < M; i++){
		int a, b, l;
		cin >> a >> b >> l;
		roads[a].push_back({b,l});
		roads[b].push_back({a,l});
	}




	for(int i = 1; i <= N; i++){
		used.insert(i);
		ricorsiva(i, i, 0);
		mnL.clear();
//		used.erase(i);
	}


	cout << mn;



}




















//VECCHIO











#include <iostream>
#include <unordered_map>
#include <vector>
#include <set>
#include <algorithm>
using namespace std;




struct road{
	int to, len;
};





set <int> passed;
long long mn = 0;
//unordered_map <int, int> shortest;

void jogging(int start, unordered_map<int, vector<road>> r, int pos, long long tot)
{
	if(tot > mn) return;

	else if(passed.size()-start+1 > 1 && pos == start) mn = min(mn, tot);

	else{
		for(auto i:r[pos])
	{
		if(i.to == start && passed.size() > 2) jogging(start, r, i.to, tot+i.len);
		else if(passed.find(i.to) == passed.end() ){
			passed.insert(i.to);
			jogging(start, r, i.to, tot+i.len);
			passed.erase(i.to);
		}
	}
	}
}







int main(){

//	freopen("input.txt","r",stdin);
//	freopen("output.txt","w",stdout);



	int N, M;
	cin >> N >> M;


	unordered_map <int, vector<road> > roads;

	for(int i = 0; i < M; i++){
		int tmpF, tmpT, tmpL;
		cin >> tmpF >> tmpT >> tmpL;
		roads[tmpF].push_back({tmpT,tmpL});
		roads[tmpT].push_back({tmpF,tmpL});
		mn += tmpL;
	}

	auto byLen = [](const road &a, const road &b){
		return a.len < b.len;
	};

	for(int i = 1; i < N; i++)
		sort(roads[i].begin(), roads[i].end(), byLen);




	for(int i = 1; i <= N; i++)
	{
		passed.insert(i);
		jogging(i, roads, i, 0);
//		shortest.clear();
//		passed.erase(i);
	}



	cout << mn;


}









































#include <iostream>
#include <unordered_map>
#include <vector>
#include <set>
#include <algorithm>
using namespace std;




struct road{
	int to, len;
};


long long mn = 0;
set <int> passed;
unordered_map <int, int> shortest;


void jogging(int start, unordered_map<int, vector<road>> r, int pos, long long tot)
{
//	cout << pos <<" "<< tot <<  " " <<passed.size()<<endl;
	if(tot > mn) return;

	else if(passed.size()+1-start > 2 && pos == start){
			mn = min(mn, tot);
//			cout <<"MMM"<<mn<<endl;
	}

	else{
		for(auto i:r[pos])
	{
//		cout << i.to <<endl;
		if(i.to == start && passed.size() > 2)
			jogging(start, r, i.to, tot+i.len);
		else if(passed.find(i.to) == passed.end() && (shortest[i.to] == 0 || tot+i.len < shortest[i.to]) ){
			passed.insert(i.to);
			shortest[i.to] = tot+i.len;
//			cout << i.to << tot << endl;
			jogging(start, r, i.to, tot+i.len);
			passed.erase(i.to);
		}
	}
	}
}







int main(){

//	freopen("input.txt","r",stdin);
//	freopen("output.txt","w",stdout);



	int N, M;
	cin >> N >> M;


	unordered_map <int, vector<road> > roads;

	for(int i = 0; i < M; i++){
		int tmpF, tmpT, tmpL;
		cin >> tmpF >> tmpT >> tmpL;
		roads[tmpF].push_back({tmpT,tmpL});
		roads[tmpT].push_back({tmpF,tmpL});
		mn += tmpL;
	}

//	auto byLen = [](const road &a, const road &b){
//		return a.len < b.len;
//	};
//
//	for(int i = 1; i < N; i++)
//		sort(roads[i].begin(), roads[i].end(), byLen);




	for(int i = 1; i <= N; i++)
	{
		cout << "AAA"<<i<<endl;
		passed.insert(i);
		jogging(i, roads, i, 0);
		shortest.clear();
//		passed.erase(i);
	}



	cout << mn;


}
