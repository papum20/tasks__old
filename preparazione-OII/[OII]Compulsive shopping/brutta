


//NUOVO





















//#include <iostream>
//using namespace std;
//
//
//
//int N, E, mx = 0;
//int P[100000];
//
//
//
//
//
//
//void foo(int pos = 0, int money = E, bool bought = false)
//{
//	if(pos == N){
//		mx = max(mx, money);
////		cout<<"A"<<money<<endl;
//	}
//
//	else
//	{
//		if(P[pos] > money){
////			cout<<"B"<<pos<<" "<<money<<endl;
//			foo(pos+1, money, false);
//		}
//		else{
//			if(bought == true){
////				cout << "C"<<pos<<" "<<money<<endl;
//				foo(pos+1, money, false);
//			}
////			cout<<"D"<<pos<<" " <<money<<endl;
//			foo(pos+1, money-P[pos], true);
////			cout <<"E"<<pos<<" "<<money<<endl;
//			foo(pos+1, P[pos]-1, false);
//		}
//	}
//}
//
//
//
//
//
//int main(){
//
//	cin >> N >> E;
//	for(int i = 0; i < N; i++)
//		cin >> P[i];
//
//
//	foo();
//	cout << mx;
//
//}
//
//


















//#include <iostream>
//using namespace std;
//
//
//
//
////
////int N, E, mx = 0;
////int P[100000];
////
////
////
////
////
////
////void foo(int pos = 0, int money = E)
////{
////	if(pos == N)
////		mx =
////}
//
//
//
//
//
//
//
//int main(){
//
//	int N, E, mx = 0;
//	cin >> N >> E;
//	int P[N];
////	for(int i = 0; i < N; i++)
////		cin >> P[i];
//
//
//
//	int dp[N];
//	bool bought[N];
//
//	for(int i = 0; i < N; i++)
//	{
//		cin >> P[N];
//		dp[N] = 0;
//
//
//		dp[N]
//	}
//
//
//
//
////	foo();
//	cout << mx;
//
//}













//#include <iostream>
//using namespace std;
//
//
//
////int N = 100000, E = 1000000000;
//
//
//
//
//int main(){
//
//	int N, E;
//	cin >> N >> E;
//
//
//
//	bool bought = false;
//	int P1;
//	cin >> P1;
//
//	if(P1 <= E/2){
//		E -= P1;
//		bought = true;
//	}
//	else
//		E = P1-1;
//
//	int P0 = P1;
//
//
//	for(int i = 1; i < N; i++)
//	{
//		cin >> P1;
//
//		if(bought)
//			bought = false;
//
//		else if(P1 <= E){
//			if(P1 <= P0){
//				if(P1 <= E/2){
//					E -= P1;
//					bought = true;
//				}
//				else
//					E = P1-1;
//			}
//			else{
//				if(P0 < E-P1+1)
//					E -= P0;
//				else
//					E = P1-1;
//			}
//		}
//
//		cout << i << " " << E << endl;
//		P0 = P1;
//	}
//
//
//
//
//	cout << E;
//
//}
//
//
//




























//VECCHIO










//#include <iostream>
//using namespace std;
//
//
//
//int N = 100000, E = 1000000000;
//int P[100000], mx[100000];
//bool bought[100000];
//
//
//
//
//
//
//void calc(int pos)
//{
//
//	if(P[pos] > mx[pos-1]){
//		mx[pos] = mx[pos-1];
//		bought[pos] = false;
//	}
//
//	else{
//		for(int i = pos-1; i >= 0; i--){
//
//
//
//
//			if(bought[i] == true)
//				break;
//		}
//	}
//
//
//
//	if(pos < N-1)
//		calc(pos+1);
//}
//
//
//
//
//
//
//
//int main(){
//
//	cin >> N >> E;
//
//	for(int i = 0; i < N; i++)
//		cin >> P[i];
//
//
//
//
//	if(P[0] > E)
//		mx[0] = E;
//	else{
//		if(P[0]-1 > E - P[0])
//			mx[0] = P[0]-1;
//		else{
//			mx[0] = E - P[0];
//			bought[0] = true;
//		}
//	}
//
//	calc(1);
//
//	cout << mx[N-1];
//
//}
//
//
//
//
//
//
//
//
//
//
////#include <iostream>
////using namespace std;
////
/////*
////int N = 100000, E = 1000000000;
////int P[100000], mx[100000];
////
////
////
////
////bool bought = false;
////
////void calc(int pos)
////{
////
////	if(pos == N)
////		return;
////
////
////	if(P[pos] > mx[pos-1]){
////		mx[pos] = mx[pos-1];
////		bought = false;
////	}
////
////	else if(pos == N-1)
////		mx[pos] = (bought)? mx[pos-1] : (mx[pos-1] - P[pos]);
////
////	else if(!bought){
////		if(P[pos]-1 > mx[pos-1] - P[pos])
////			mx[pos] = P[pos]-1;
////		else{
////		mx[pos] = mx[pos-1] - P[pos];
////		bought = true;
////		}
////	}
////
////	else if(bought){
////		if(P[pos+1] > P[pos]){
////			if(P[pos+1] > mx[pos-1]){
////				mx[pos] = mx[pos-1];
////				bought = false;
////			}
////			else{
////				if(P[pos]-1 > mx[pos-1] - P[pos]){
////					mx[pos] = P[pos]-1;
////					bought  = false;
////				}
////				else
////					mx[pos] = mx[pos-1] - P[pos];
////			}
////		}
////		else{
////			mx[pos] = mx[pos-1];
////			bought = false;
////		}
////	}
////
////
////
////
////	calc(pos+1);
////
////}
////*/
////
////
////
////int N = 100000, E = 1000000000;
////int P[100000];
////int buy = 0, nobuy = 0, less = 0;
////
////
////
////
////bool bought1 = false, bougth2 = false, bougth3 = false;
////
////void calc(int pos)
////{
////
////	if(pos == N)
////		return;
////
////
////	if(P[pos] > mx[pos-1]){
////		mx[pos] = mx[pos-1];
////		bought = false;
////	}
////
////	else if(pos == N-1)
////		mx[pos] = (bought)? mx[pos-1] : (mx[pos-1] - P[pos]);
////
////	else if(!bought){
////		if(P[pos]-1 > mx[pos-1] - P[pos])
////			mx[pos] = P[pos]-1;
////		else{
////		mx[pos] = mx[pos-1] - P[pos];
////		bought = true;
////		}
////	}
////
////	else if(bought){
////		if(P[pos+1] > P[pos]){
////			if(P[pos+1] > mx[pos-1]){
////				mx[pos] = mx[pos-1];
////				bought = false;
////			}
////			else{
////				if(P[pos]-1 > mx[pos-1] - P[pos]){
////					mx[pos] = P[pos]-1;
////					bought  = false;
////				}
////				else
////					mx[pos] = mx[pos-1] - P[pos];
////			}
////		}
////		else{
////			mx[pos] = mx[pos-1];
////			bought = false;
////		}
////	}
////
////
////
////
////	calc(pos+1);
////
////}
////
////
////
////
////
////int main(){
////
////	cin >> N >> E;
////
////	for(int i = 0; i < N; i++)
////		cin >> P[i];
////
////
////
////
//////	if(P[0]-1 > E - P[0])
//////		mx[0] = P[0] - 1;
//////	else{
//////		mx[0] = E - P[0];
//////		bought = true;
//////	}
////
////	if(P[0] > E){
////		buy = E;
////		nobuy = E;
////		less = E;
////	}
////	else{
////		if(P[0]-1 > E - P[0]){
////			buy
////		}
////	}
////
////	calc(1);
////	cout << mx[N-1];
////
////}
