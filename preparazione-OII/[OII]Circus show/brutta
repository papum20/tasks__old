#include <iostream>
#include <unordered_map>
#include <set>
using namespace std;



int N;
set <int> usedTot;
unordered_map <int, set<int> > used;
unordered_map <int, unordered_map <int, int> > cycle;





void fillContainers(int a[], int ind, int pos, int n)
{
	if(usedTot.find(a[pos]) != usedTot.end() ){
		int tmp = 0;
		for(auto t:usedTot){
			if(t-tmp > 1){
				fillContainers(a, ind+1, tmp+1, 0);
				return;
			}
			else tmp = t;
		}
	}
	else{
		usedTot.insert(a[pos]);
		used[ind].insert(a[pos]);
		cycle[ind][a[pos]] = n;
		fillContainers(a, ind, a[pos], n+1);
	}
}








int main(){

	cin >> N;

	int c[N];
	for(int i = 0; i < N; i++) cin >> c[i];



	fillContainers(c, 0, 0, 0);

	for(int i = 0; i < cycle.size(); i++){
		for(int j = 0; j < cycle[i].size(); j++)
			cout << cycle[i][j];
		cout << endl;
	}


}
